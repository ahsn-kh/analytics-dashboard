// app/dashboard/sites/page.tsx
'use client'; // This is a Client Component - CORRECTLY PRESENT AND AT THE TOP

import { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import Link from 'next/link';

// Define the type for a Site object, matching your Supabase table schema
interface Site {
  id: string;
  name: string;
  domain: string;
  api_key: string; // The unique key generated by Supabase for each site
}

export default function SitesPage() {
  const supabase = createClientComponentClient(); // Initialize Supabase client for client-side operations
  const [sites, setSites] = useState<Site[]>([]); // State to hold the list of user's sites
  const [newSiteName, setNewSiteName] = useState(''); // State for the new site's name input
  const [newSiteDomain, setNewSiteDomain] = useState(''); // State for the new site's domain input
  const [loading, setLoading] = useState(true); // Loading state for fetching/deleting operations
  const [addingSite, setAddingSite] = useState(false); // Loading state specifically for adding a site
  const [error, setError] = useState<string | null>(null); // State for displaying error messages

  // Effect hook to fetch sites when the component mounts
  useEffect(() => {
    fetchSites();
  }, []); // Empty dependency array means this runs once after initial render

  // Function to fetch sites belonging to the currently logged-in user
  const fetchSites = async () => {
    setLoading(true);
    setError(null); // Clear previous errors

    // Select sites from the 'sites' table. RLS policy will ensure only the user's sites are returned.
    const { data, error } = await supabase
      .from('sites')
      .select('id, name, domain, api_key'); // Specify the columns you want to retrieve

    if (error) {
      console.error('Error fetching sites:', error);
      setError(error.message); // Set error message for display
    } else {
      setSites(data || []); // Update sites state, handle null data gracefully
    }
    setLoading(false); // End loading
  };

  // Handler for adding a new site
  const handleAddSite = async (e: React.FormEvent) => {
    e.preventDefault(); // Prevent default form submission behavior
    setAddingSite(true); // Set adding site loading state
    setError(null); // Clear previous errors

    // Basic client-side validation
    if (!newSiteName.trim() || !newSiteDomain.trim()) {
      setError('Site name and domain cannot be empty.');
      setAddingSite(false);
      return;
    }

    // More robust domain validation using a regular expression
    const domainRegex = /^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(newSiteDomain.trim())) {
      setError('Please enter a valid domain name (e.g., example.com).');
      setAddingSite(false);
      return;
    }

    // Get the current user's session to retrieve their user_id
    const { data: { user } = { user: null } } = await supabase.auth.getUser(); // Ensure user is destructured safely
    if (!user) {
      setError('You must be logged in to add a site.');
      setAddingSite(false);
      return;
    }

    // Insert the new site into the 'sites' table
    const { data, error } = await supabase
      .from('sites')
      .insert([
        {
          name: newSiteName.trim(),
          domain: newSiteDomain.trim(),
          user_id: user.id // Associate the site with the current user
        },
      ])
      .select(); // Use .select() to return the inserted row, including the generated `api_key` and `id`

    if (error) {
      console.error('Error adding site:', error);
      if (error.code === '23505') { // PostgreSQL unique violation error code (e.g., domain already exists)
        setError('A site with this domain already exists.');
      } else {
        setError(error.message);
      }
    } else {
      setNewSiteName(''); // Clear form inputs
      setNewSiteDomain('');
      fetchSites(); // Re-fetch the list of sites to display the newly added one
    }
    setAddingSite(false); // End adding site loading state
  };

  // Handler for deleting an existing site
  const handleDeleteSite = async (siteId: string) => {
    // Confirmation dialog before deleting, as it's a destructive action
    if (!confirm('Are you sure you want to delete this site and ALL its analytics data? This action cannot be undone.')) {
      return; // If user cancels, stop here
    }
    setLoading(true); // Set general loading state
    setError(null); // Clear previous errors

    // Delete the site. RLS will ensure only the user's own sites can be deleted.
    const { error } = await supabase
      .from('sites')
      .delete()
      .eq('id', siteId); // Match by site ID

    if (error) {
      console.error('Error deleting site:', error);
      setError(error.message);
    } else {
      fetchSites(); // Re-fetch sites to update the list after deletion
    }
    setLoading(false); // End loading
  };

  return (
    // All these classNames like "min-h-screen", "bg-gray-100", "p-8", etc.
    // are Tailwind CSS classes. If they are not being applied, it means
    // your Tailwind CSS is not being processed or bundled correctly by Next.js.
    <div className="min-h-screen bg-gray-100 p-8 flex flex-col items-center">
      <div className="bg-white p-8 rounded-lg shadow-xl text-center max-w-4xl w-full">
        <h1 className="text-3xl font-extrabold text-gray-800 mb-6">Manage Your Websites</h1>

        {/* Navigation back to Dashboard */}
        <div className="mb-6 text-left">
          <Link href="/" className="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors duration-200">
            &larr; Back to Dashboard
          </Link>
        </div>

        {/* Add New Site Form */}
        <form onSubmit={handleAddSite} className="mb-8 p-6 bg-gray-50 rounded-lg border border-gray-200">
          <h2 className="text-2xl font-bold text-gray-700 mb-4">Add New Site</h2>
          {error && <p className="text-red-500 text-sm mb-4">{error}</p>} {/* Display error messages */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <input
              type="text"
              placeholder="Site Name (e.g., My Personal Blog)"
              value={newSiteName}
              onChange={(e) => setNewSiteName(e.target.value)}
              className="p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              required // HTML5 required attribute for basic form validation
            />
            <input
              type="text"
              placeholder="Domain (e.g., example.com)"
              value={newSiteDomain}
              onChange={(e) => setNewSiteDomain(e.target.value)}
              className="p-3 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <button
            type="submit"
            className="w-full px-6 py-3 bg-green-600 text-white font-bold rounded-md hover:bg-green-700 transition-colors duration-200"
            disabled={addingSite} // Disable button while adding a site
          >
            {addingSite ? 'Adding...' : 'Add Site'}
          </button>
        </form>

        {/* List Existing Sites */}
        <h2 className="text-2xl font-bold text-gray-700 mb-4">Your Registered Sites</h2>
        {loading && <p className="text-gray-600">Loading your sites...</p>}
        {!loading && sites.length === 0 && (
          <p className="text-gray-600">No sites registered yet. Add one above!</p>
        )}
        {!loading && sites.length > 0 && (
          <ul className="space-y-4 text-left">
            {sites.map((site) => (
              <li key={site.id} className="bg-blue-50 p-6 rounded-lg border border-blue-200 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                <div className="mb-4 sm:mb-0 sm:pr-4 flex-grow">
                  <h3 className="text-xl font-semibold text-blue-800">{site.name}</h3>
                  <p className="text-gray-700 font-mono text-sm break-all">{site.domain}</p>
                  {/* Display the API Key for the site */}
                  <p className="text-gray-600 text-xs mt-2">API Key: <span className="font-mono text-blue-900 break-all">{site.api_key}</span></p>
                </div>
                <div className="flex flex-col sm:flex-row gap-2">
                  <button
                    onClick={() => navigator.clipboard.writeText(site.api_key)} // Copy API key to clipboard
                    className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors duration-200 text-sm"
                  >
                    Copy API Key
                  </button>
                  <button
                    onClick={() => handleDeleteSite(site.id)} // Delete button
                    className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors duration-200 text-sm"
                    disabled={loading}
                  >
                    Delete Site
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}